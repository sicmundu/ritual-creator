#!/bin/bash

GREEN='\033[0;32m'
BRIGHT_GREEN='\033[1;32m'
NC='\033[0m'  # No Color

LOG_FILE="$HOME/processed.log"
CONFIG_FILE="wallets.conf"


function print_step() {
  echo -e "${BRIGHT_GREEN}==================================================${NC}"
  echo -e "${GREEN}$1${NC}"
  echo -e "${BRIGHT_GREEN}==================================================${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞
function spinner() {
  local pid=$1
  local delay=0.1
  local spinstr='|/-\\'
  echo -n " "
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf "${GREEN} [%c]  ${NC}" "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
function print_banner() {
  echo -e "${GREEN}üåüüåüüåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Ritual Node üåüüåüüåü${NC}"
  sleep 1
  echo -e "${GREEN}–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.${NC}"
  echo -e "${GREEN}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞.${NC}"
  echo ""
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
function handle_error() {
  local step=$1
  echo -e "${BRIGHT_GREEN}‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: '$step'${NC}"
  echo -e "${BRIGHT_GREEN}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–º–æ—â–∏.${NC}"
  exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Forge
install_forge() {
  print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Forge"
  curl -L https://foundry.paradigm.xyz | bash
  source /root/.bashrc
  foundryup
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
install_docker() {
   print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏ Docker"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
  sudo apt update && sudo apt upgrade -y
  sudo apt -qy install curl git jq lz4 build-essential screen apt-transport-https ca-certificates software-properties-common

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
  if ! command -v docker &> /dev/null; then
    echo -e "${GREEN}üê≥ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...${NC}"
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
    sudo apt install docker-ce -qy
    echo -e "${GREEN}üê≥ Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
  else
    echo -e "${GREEN}üê≥ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ make –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
install_build_tools() {
  print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ make –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∫–∏"
  if ! command -v make &> /dev/null; then
    echo -e "${GREEN}üõ† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ make –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∫–∏...${NC}"
    sudo apt-get install build-essential -y
    echo -e "${GREEN}üõ† make —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
  else
    echo -e "${GREEN}üõ† make —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup_repository() {
  print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  if [ -d "$HOME/infernet-container-starter" ]; then
    echo -e "${GREEN}–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é...${NC}"
    cd $HOME/infernet-container-starter
  else
    echo -e "${GREEN}–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...${NC}"
    git clone --recurse-submodules https://github.com/ritual-net/infernet-container-starter $HOME/infernet-container-starter || handle_error "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    cd $HOME/infernet-container-starter || handle_error "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
  fi

  docker_compose_file="$HOME/infernet-container-starter/deploy/docker-compose.yaml"

  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yaml
  sed -i 's/8545:3000/8545:3051/' "$docker_compose_file" || handle_error "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yaml"
  sed -i 's/--port 3000/--port 3051/' "$docker_compose_file" || handle_error "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yaml"
  sed -i 's/3000:3000/3051:3051/' "$docker_compose_file" || handle_error "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yaml"
  sed -i 's/--bind=0.0.0.0:3000/--bind=0.0.0.0:3051/' "$docker_compose_file" || handle_error "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yaml"

  screen -ls | grep "ritual" | cut -d. -f1 | awk '{print $1}' | xargs -I {} screen -S {} -X quit
  screen -dmS ritual
  screen -S ritual -p 0 -X stuff "project=hello-world make deploy-container\n"
  sleep 15
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
update_config_files() {
  local wallet=$1
  local private_key=$2

  [[ "$private_key" != "0x"* ]] && private_key="0x$private_key"

  print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è $wallet"

  config_file="/root/infernet-container-starter/deploy/config.json"
  docker_compose_file="/root/infernet-container-starter/deploy/docker-compose.yaml"

  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yaml
  sed -i 's/8545:3000/8545:3051/' "$docker_compose_file"
  sed -i 's/--port 3000/--port 3051/' "$docker_compose_file"
  sed -i 's/3000:3000/3051:3051/' "$docker_compose_file"
  sed -i 's/--bind=0.0.0.0:3000/--bind=0.0.0.0:3051/' "$docker_compose_file"

  if [ $? -eq 0 ]; then
    echo -e "${GREEN}–ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 3051 –≤ —Ñ–∞–π–ª–µ docker-compose.yaml.${NC}"
  else
    echo -e "${GREEN}–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞.${NC}"
  fi

  sed -i "s|\"registry_address\":.*|\"registry_address\": \"0x3B1554f346DFe5c482Bb4BA31b880c1C18412170\",|" "$config_file"
  sed -i "s|\"rpc_url\":.*|\"rpc_url\": \"https://base-rpc.publicnode.com\",|" "$config_file"
  sed -i "s|\"private_key\":.*|\"private_key\": \"$private_key\"|" "$config_file"
  sed -i 's/"port": "3000"/"port": "3051"/' "$config_file"
  sed -i 's/--bind=0.0.0.0:3000/--bind=0.0.0.0:3051/' "$config_file"

    # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è "snapshot_sync"
  snapshot_sync_value='{"snapshot_sync": {"sleep": 5, "batch_size": 50}}'

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è "snapshot_sync" —Å –ø–æ–º–æ—â—å—é sed
  sed -i '/"snapshot_sync": {/c\'"$snapshot_sync_value" "$config_file"

  new_rpc_url="https://base-rpc.publicnode.com"
  sed -i "/^# anvil's third default address$/,/^# deploying the contract$/s|sender := .*|sender := $private_key|" ~/infernet-container-starter/projects/hello-world/contracts/Makefile
  sed -i "/^# anvil's third default address$/,/^# deploying the contract$/s|RPC_URL := .*|RPC_URL := $new_rpc_url|" ~/infernet-container-starter/projects/hello-world/contracts/Makefile
  sed -i "s|address registry.*|address registry = 0x3B1554f346DFe5c482Bb4BA31b880c1C18412170;|" ~/infernet-container-starter/projects/hello-world/contracts/script/Deploy.s.sol
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
deploy_and_update_config() {
    print_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

    cd "$HOME/infernet-container-starter" || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞"
    
    echo -e "${BLUE}üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...${NC}"
    output=$(make deploy-contracts project=hello-world 2>&1)
    contract_address=$(echo "$output" | grep -oP 'Deployed SaysHello:  \K[0-9a-fA-Fx]+')

    if [ -z "$contract_address" ]; then
        handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"
    fi

    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É: $contract_address${NC}"

    local config_file="$HOME/infernet-container-starter/deploy/config.json"
    jq --arg addr "$contract_address" '.containers[0].allowed_addresses = [$addr]' "$config_file" > tmp.json && mv tmp.json "$config_file"

    local solidity_file="$HOME/infernet-container-starter/projects/hello-world/contracts/script/CallContract.s.sol"
    sed -i "s|SaysGM(.*);|SaysGM($contract_address);|" "$solidity_file"

    echo -e "${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    docker-compose down && docker-compose up -d

    echo -e "${BLUE}üìû –í—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...${NC}"
    make call-contract project=hello-world

    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤—ã–∑–≤–∞–Ω.${NC}"
}

restart_docker_services() {
  print_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"
  sleep 20
  docker restart infernet-anvil
  docker restart infernet-node
  docker restart hello-world
  docker restart deploy-node-1
  docker restart deploy-fluentbit-1
  docker restart deploy-redis-1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_and_remove_containers() {
  print_step "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
  docker compose down
  echo -e "${GREEN}üöÆ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã.${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
process_wallet() {
  local wallet=$1
  local private_key=$2

  print_step "üîë –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ—à–µ–ª—å–∫–æ–º: $wallet"

  #install_forge

  install_docker

  install_build_tools


  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  setup_repository

  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º –∏ –∫–æ—à–µ–ª—å–∫–æ–º
  update_config_files "$wallet" "$private_key"

  # –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  docker compose up -d

  # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  deploy_and_update_config

  # –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  echo "$wallet –æ–±—Ä–∞–±–æ—Ç–∞–Ω." >> $LOG_FILE

  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  stop_and_remove_containers

  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ screen —Å –∏–º–µ–Ω–µ–º "ritual"
  screen -ls | grep "ritual" | cut -d. -f1 | awk '{print $1}' | xargs -I {} screen -S {} -X quit
  echo -e "${GREEN}üßπ –°–µ—Å—Å–∏—è screen 'ritual' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.${NC}"
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
main() {
      echo -e "${BRIGHT_GREEN}
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SDS Ritual Node Installer ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"

  print_step "–ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏"

  # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
  while IFS=: read -r wallet private_key; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø—É—Å—Ç–æ–π –∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    if [[ -n "$wallet" && ! $(grep "$wallet" $LOG_FILE) ]]; then
      process_wallet "$wallet" "$private_key"
    else
      echo -e "${GREEN}–ö–æ—à–µ–ª–µ–∫ $wallet —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü—Ä–æ–ø—É—Å–∫...${NC}"
    fi
  done < "$CONFIG_FILE"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
main
